#!/usr/bin/python 

import sys, argparse, urllib.request, os.path, subprocess, json

DEFAULT_PORT = 32000

def request(url, data = None):
	try:
		resp = urllib.request.urlopen(url, data)
	except urllib.error.HTTPError as e:
		resp = e
	
	if resp.code == 200:
		return json.loads(resp.read().decode('utf-8'))
	elif resp.code // 100 == 5:
		print("Server error: %s" % resp.reason, file = sys.stderr)
		print(resp.read(), file = sys.stderr)
	elif resp.code == 404:
		print("Can't find instance", file = sys.stderr)
	elif resp.code == 400:
		err = json.loads(resp.read().decode('utf-8'))
		if err.get("output"):
			print(err.output)
		stack = "\n".join(("  %s" % _) for _ in err["stack"].split("\n"))
		print("Javascript %s: %s (at line %s)\n" % (err["name"], err["message"], err["lineNumber"]), file = sys.stderr)
		print("Stack trace:\n%s" % stack, file=sys.stderr)
	else:
		print("Bad response code: %d %s" % (resp.code, resp.reason), file = sys.stderr)
	sys.exit(1)

def preprocess(code, no_coffee):
	if not no_coffee:
		return subprocess.Popen(["coffee", "-cs"], stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate(code)[0] + b"\n"
	else:
		return code + b"\n"

p = argparse.ArgumentParser(description = 'Execute javascript in your browser')
p.add_argument("instance", nargs = '?', default = None, help = "Instance in which javascript will be executed")
p.add_argument("args", nargs = '*', default = [], help = "Arguments to pass to the script (JSON formatted)")
p.add_argument("--list", "-l", help = "List instances", action = "store_true")
p.add_argument("--file", "-f", help = "File to execute (- is for STDIN)", default = [], action = "append")
p.add_argument("--include", "-i", help = "Same as -f, but never pre-processed by coffee-script", default = [], action = "append")
p.add_argument("--execute", "-e", help = "Execute given javascript argument", default = [], action = "append")
p.add_argument("--no-coffee", "-c", help = "Don't try to use coffee-script to preprocess the javascript", action = "store_true")
p.add_argument("--no-jquery", "-j", help = "Don't prepend jQuery to the script", action = "store_true")
p.add_argument("--port", "-p", help = "Port on which the browser listens for commands", action = "store", default = DEFAULT_PORT)
args = p.parse_args()

newargs = []
for a in args.args:
	try:
		json.loads(a)
		newargs.append(a)
	except:
		newargs.append(json.dumps(a))
args.args = newargs

# Get instances
instances = request("http://localhost:%s/list" % args.port)

# Handle --list
if args.list:
	for instance in instances:
		if instance["active"]:
			print('[', end="")
		print("%s: (%s) %s" % (instance["id"], instance["url"], instance["title"]), end="")
		if instance["active"]:
			print(']', end="")
		print()
	sys.exit(0)

# Find instance
found = False
if args.instance is None or args.instance == ".":
	for instance in instances:
		if instance["active"]:
			args.instance = instance["id"]
			found = True
			break
else:
	for instance in instances:
		if instance["id"] == args.instance:
			found = True
			break
	if not found:
		for instance in instances:
			if args.instance in instance["url"] + " " + instance["title"]:
				found = True
				args.instance = instance["id"]
				if instance["active"]:
					break

if not found:
	print("Can't find instance", file=sys.stderr)
	sys.exit(1)

# Find code
code = b""
has_stdin = True
if not args.include and not args.execute and not args.file:
	args.file = ["-"]

# 1. Include files (-i)
for i in args.include:
	if i == "-":
		has_stdin = False
		code += sys.stdin.read().encode('utf-8') + b"\n"
	else:
		code += open(i, 'rb').read() + b"\n"

# 2. Files (-f)
for f in args.file:
	if f == "-":
		has_stdin = False
		code += preprocess(sys.stdin.read().encode('utf-8'), args.no_coffee)
	else:
		code += preprocess(open(f, 'rb').read(), args.no_coffee)

# 3. Command-line (-e)
for e in args.execute:
	code += preprocess(e.encode('utf-8'), args.no_coffee)

code = b"args = [" + ",".join(args.args).encode('utf-8') + b"];\n" + code

# Prepend jquery to the script
if not args.no_jquery:
	jquery_path = os.path.expanduser("~/.cache/jquery.min.js")
	if os.path.exists(jquery_path):
		jquery = open(jquery_path).read().encode('utf-8')
	else:
		jquery = urllib.request.urlopen("http://code.jquery.com/jquery.min.js").read()
	code = jquery + b"\n" + code

# Eval code
result = request("http://localhost:%s/execute/%s" % (args.port, args.instance), code)
if result["result"] == "ok":
	if result.get("output"):
		print(result.get("output"), end="")
		if result.get("value"):
			print()
	if result.get("value"):
		json.dumps(result.get("value"))
else:
	print
	sys.exit(1)
